{"ast":null,"code":"export default class PokemonService {\n  static getPokemons() {\n    return fetch('http://localhost:3001/pokemons').then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static getPokemon(id) {\n    return fetch(`http://localhost:3001/pokemons/${id}`).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n  }\n\n  static updatePokemon(pokemon) {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(pokemon),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static addPokemon(pokemon) {\n    pokemon.created = new Date(pokemon.created);\n    return fetch(`http://localhost:3001/pokemon`, {\n      method: 'POST',\n      body: JSON.stringify(pokemon),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static deletePokemon(pokemon) {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    console.error(error);\n  }\n\n}","map":{"version":3,"sources":["/Users/ggg/Documents/REACT-POKEMON-APP/src/services/pokemon-service.ts"],"names":["PokemonService","getPokemons","fetch","then","response","json","catch","error","handleError","getPokemon","id","data","isEmpty","updatePokemon","pokemon","method","body","JSON","stringify","headers","addPokemon","created","Date","deletePokemon","Object","keys","length","console"],"mappings":"AAEA,eAAe,MAAMA,cAAN,CAAqB;AAElC,SAAOC,WAAP,GAAyC;AACvC,WAAOC,KAAK,CAAC,gCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJC,KAFI,CAEEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFX,CAAP;AAGD;;AAED,SAAOE,UAAP,CAAkBC,EAAlB,EAAqD;AACnD,WAAOR,KAAK,CAAE,kCAAiCQ,EAAG,EAAtC,CAAL,CACJP,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECQ,IAAI,IAAI,KAAKC,OAAL,CAAaD,IAAb,IAAqB,IAArB,GAA4BA,IAFrC,EAGJL,KAHI,CAGEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAHX,CAAP;AAID;;AAED,SAAOM,aAAP,CAAqBC,OAArB,EAAwD;AACtD,WAAOZ,KAAK,CAAE,kCAAiCY,OAAO,CAACJ,EAAG,EAA9C,EAAgD;AAC1DK,MAAAA,MAAM,EAAE,KADkD;AAE1DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAFoD;AAG1DK,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHiD,KAAhD,CAAL,CAKNhB,IALM,CAKDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALX,EAMNC,KANM,CAMAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANT,CAAP;AAOD;;AAGD,SAAOa,UAAP,CAAkBN,OAAlB,EAAsD;AACpDA,IAAAA,OAAO,CAACO,OAAR,GAAkB,IAAIC,IAAJ,CAASR,OAAO,CAACO,OAAjB,CAAlB;AAEA,WAAOnB,KAAK,CAAE,+BAAF,EAAmC;AAC7Ca,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAFuC;AAG7CK,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAHoC,KAAnC,CAAL,CAKNhB,IALM,CAKDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALX,EAMNC,KANM,CAMAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANT,CAAP;AAOD;;AAED,SAAOgB,aAAP,CAAqBT,OAArB,EAAoD;AAClD,WAAOZ,KAAK,CAAE,kCAAiCY,OAAO,CAACJ,EAAG,EAA9C,EAAiD;AAC3DK,MAAAA,MAAM,EAAE,QADmD;AAE3DI,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFkD,KAAjD,CAAL,CAINhB,IAJM,CAIDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJX,EAKNC,KALM,CAKAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CALT,CAAP;AAMD;;AAED,SAAOK,OAAP,CAAeD,IAAf,EAAsC;AACpC,WAAOa,MAAM,CAACC,IAAP,CAAYd,IAAZ,EAAkBe,MAAlB,KAA6B,CAApC;AACD;;AAED,SAAOlB,WAAP,CAAmBD,KAAnB,EAAuC;AACrCoB,IAAAA,OAAO,CAACpB,KAAR,CAAcA,KAAd;AACD;;AArDiC","sourcesContent":["import Pokemon from \"../models/pokemon\";\n \nexport default class PokemonService {\n \n  static getPokemons(): Promise<Pokemon[]> {\n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n  }\n \n  static getPokemon(id: number): Promise<Pokemon|null> {\n    return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data)\n      .catch(error => this.handleError(error));\n  }\n\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon>{\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`,{\n      method: 'PUT',\n      body: JSON.stringify(pokemon),\n      headers: { 'Content-Type': 'application/json' }\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n\n\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n    pokemon.created = new Date(pokemon.created);\n\n    return fetch(`http://localhost:3001/pokemon` , {\n      method: 'POST',\n      body: JSON.stringify(pokemon),\n      headers: {'Content-Type': 'application/json'}\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' } \n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error: Error): void {\n    console.error(error);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}