{"ast":null,"code":"var _jsxFileName = \"/Users/ggg/Documents/REACT-POKEMON-APP/src/components/pokemon-form.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n\nconst PokemonForm = ({\n  pokemon,\n  isEditForm\n}) => {\n  const history = useHistory();\n  const [form, setForm] = useState({\n    picture: {\n      value: pokemon.picture\n    },\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n\n    if (checked) {\n      // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\n      const newTypes = form.types.value.concat([type]);\n      const newField = {\n        value: newTypes\n      };\n      setForm({ ...form,\n        ...{\n          types: newField\n        }\n      });\n    } else {\n      // Si l'utilisateur décoche un type, on le retire à la liste des types du pokémon.\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      const newField = {\n        value: newTypes\n      };\n      setForm({ ...form,\n        ...{\n          types: newField\n        }\n      });\n    }\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const validateForm = () => {\n    let newForm = form; // Validator name\n\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg = 'Le nom du pokémon est requis (1-25).';\n      const newField = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.name.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } // Validator hp\n\n\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } // Validator cp\n\n\n    if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField = {\n        value: form.cp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.cp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  };\n\n  const isTypesValid = type => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    } // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    } // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n\n\n    return true;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if (isFormValid) {\n      pokemon.name = form.name.value;\n      pokemon.hp = form.hp.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n  };\n\n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col s12 m8 offset-m2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card hoverable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: pokemon.picture,\n    alt: pokemon.name,\n    style: {\n      width: '250px',\n      margin: '0 auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"btn-floating halfway-fab waves-effect waves-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    onClick: deletePokemon,\n    className: \"material-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"delete\"))), React.createElement(\"div\", {\n    className: \"card-stacked\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Nom\"), React.createElement(\"input\", {\n    id: \"name\",\n    type: \"text\",\n    name: \"name\",\n    className: \"form-control\",\n    value: form.name.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), form.name.error && React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, form.name.error)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"hp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Point de vie\"), React.createElement(\"input\", {\n    id: \"hp\",\n    type: \"number\",\n    name: \"hp\",\n    className: \"form-control\",\n    value: form.hp.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }), form.hp.error && React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, form.hp.error)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"cp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"D\\xE9g\\xE2ts\"), React.createElement(\"input\", {\n    id: \"cp\",\n    type: \"number\",\n    name: \"cp\",\n    className: \"form-control\",\n    value: form.cp.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), form.cp.error && React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, form.cp.error)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"Types\"), types.map(type => React.createElement(\"div\", {\n    key: type,\n    style: {\n      marginBottom: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: type,\n    type: \"checkbox\",\n    name: \"types\",\n    className: \"filled-in\",\n    value: type,\n    checked: hasType(type),\n    disabled: !isTypesValid(type),\n    onChange: e => selectType(type, e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: formatType(type),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, type))))))), React.createElement(\"div\", {\n    className: \"card-action center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"Valider\")))))));\n};\n\nexport default PokemonForm;","map":{"version":3,"sources":["/Users/ggg/Documents/REACT-POKEMON-APP/src/components/pokemon-form.tsx"],"names":["React","useState","useHistory","formatType","PokemonService","PokemonForm","pokemon","isEditForm","history","form","setForm","picture","value","name","isValid","hp","cp","types","hasType","type","includes","selectType","e","checked","target","newTypes","concat","newField","filter","currentType","handleInputChange","fieldName","fieldValue","validateForm","newForm","test","errorMsg","error","isTypesValid","length","handleSubmit","preventDefault","isFormValid","updatePokemon","then","push","id","deletePokemon","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n\ntype Props = {\n  pokemon: Pokemon\n  isEditForm: boolean\n};\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?: boolean\n};\n\ntype Form = {\n  picture: Field,\n  name: Field,\n  hp: Field,\n  cp: Field,\n  types: Field\n}\n\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n\n  const history = useHistory();\n\n  const [form, setForm] = useState<Form>({\n    picture: {value: pokemon.picture},\n    name: { value: pokemon.name, isValid: true },\n    hp: { value: pokemon.hp, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true }\n  });\n\n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n\n  const hasType = (type: string): boolean => {\n    return form.types.value.includes(type);\n  }\n\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n    const checked = e.target.checked;\n\n    if(checked) {\n      // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.concat([type]);\n      const newField: Field = { value: newTypes };\n\n      setForm({...form, ...{ types: newField }});\n    } else {\n      // Si l'utilisateur décoche un type, on le retire à la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n      const newField: Field = { value: newTypes };\n\n      setForm({...form, ...{ types: newField }});\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue } };\n\n    setForm({ ...form, ...newField});\n  }\n\n  const validateForm = () => {\n    let newForm: Form = form;\n    \n    // Validator name\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    // Validator hp\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ hp: newField } };\n    } else {\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ hp: newField } };\n    }\n\n    // Validator cp\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  }\n\n  const isTypesValid = (type: string): boolean => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n    \n    // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n    if (form.types.value.length >= 3 && !hasType(type)) { \n      return false; \n    } \n    \n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n    return true;\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if(isFormValid) {\n      pokemon.name = form.name.value;\n      pokemon.hp = form.hp.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n  }\n\n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n              <span className=\"btn-floating halfway-fab waves-effect waves-light\">\n                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\n              </span>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" type=\"text\" name=\"name\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.name.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.name.error} \n                  </div>} \n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" type=\"number\" name=\"hp\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.hp.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.hp.error}\n                  </div>} \n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" type=\"number\" name=\"cp\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.cp.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.cp.error}\n                  </div>} \n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" name=\"types\" className=\"filled-in\" value={type} checked={hasType(type)} disabled={!isTypesValid(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n \nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}